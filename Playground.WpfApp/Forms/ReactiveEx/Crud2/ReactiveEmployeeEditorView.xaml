<controls:MetroWindow  
    x:Class="Playground.WpfApp.Forms.ReactiveEx.Crud2.ReactiveEmployeeEditorView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:Playground.WpfApp.Forms.ReactiveEx.Crud2"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:behaviors="clr-namespace:Playground.WpfApp.Behaviors"
    behaviors:DialogCloserDependencyProperty.DialogResult="{Binding CloseWindowFlag}"
    xmlns:da="clr-namespace:System.ComponentModel.DataAnnotations;assembly=System.ComponentModel.DataAnnotations"
    xmlns:attributeValidation="clr-namespace:Playground.WpfApp.Mvvm.AttributedValidation"
    xmlns:converters="clr-namespace:Playground.WpfApp.Converters"
    mc:Ignorable="d"
    BorderBrush="{DynamicResource AccentColorBrush}"
    BorderThickness="1"
    GlowBrush="{DynamicResource AccentColorBrush}"
    ResizeMode="CanResizeWithGrip"
    UseLayoutRounding="True"
    WindowStartupLocation="CenterScreen"
    WindowTransitionsEnabled="True"
    TitleCharacterCasing="Normal"
    Title="{Binding Title}" Height="520" Width="500">

    <controls:MetroWindow.Resources>
        <ResourceDictionary>
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="controls:ButtonHelper.PreserveTextCase" Value="True" />
            </Style>

            <ItemsPanelTemplate x:Key="VirtualizingStackPanel">
                <VirtualizingStackPanel />
            </ItemsPanelTemplate>

            <converters:BoolToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        </ResourceDictionary>
    </controls:MetroWindow.Resources>


    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>


        <DockPanel Grid.Row="0" Margin="2">
            <Grid Margin="10">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Label Grid.Row="0" Grid.Column="1" Content="First Name:" Margin="5" Width="auto" />
                <TextBox Grid.Row="0" Grid.Column="2"  Text="{Binding Model.FirstName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}" Margin="5" Width="120"/>

                <Label Grid.Row="0" Grid.Column="3" Content="Last Name:" Margin="5" Width="auto" />
                <TextBox Grid.Row="0" Grid.Column="4"  Text="{Binding Model.LastName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}" Margin="5" Width="120"/>

                <Label Grid.Row="1" Grid.Column="1" Content="Salary:" Margin="5" Width="auto" />
                <TextBox Grid.Row="1" Grid.Column="2"  Text="{Binding Model.Salary, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True}" Margin="5" Width="120"/>

                <Label Grid.Row="1" Grid.Column="3" Content="Department:" Margin="5" Width="auto" />
                <ComboBox Grid.Row="1" Grid.Column="4" Margin="5"
                              Width="120"
                              ItemsSource="{Binding AllDepartments, UpdateSourceTrigger=PropertyChanged}"
                              SelectedItem="{Binding SelectedDepartment, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}"
                              DisplayMemberPath="DepartmentName"
                              ItemsPanel="{StaticResource VirtualizingStackPanel}" 
                              Text="Select Department"/>

                <Label Grid.Row="2" Grid.Column="1" Content="Job Title:" Margin="5" Width="auto" />
                <ComboBox Grid.Row="2" Grid.Column="2" Margin="5"
                              Width="120"
                              ItemsSource="{Binding AllJobTitles, UpdateSourceTrigger=PropertyChanged}"
                              SelectedItem="{Binding SelectedJobTitle, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}"
                              DisplayMemberPath="JobTitle"
                              ItemsPanel="{StaticResource VirtualizingStackPanel}"
                              Text="Select Job Title"/>

                <Label Grid.Row="2" Grid.Column="3" Content="Ratings:" Margin="5" Width="auto" />
                <controls:NumericUpDown Grid.Row="2" Grid.Column="4" 
                                            Value="{Binding Model.Rating, 
                        Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}" Width="120" Height="20"/>

                <Label Grid.Row="3" Grid.Column="1" Content="Is Active:" Margin="5" Width="auto" />
                <CheckBox Grid.Row="3" Grid.Column="2" IsChecked="{Binding Model.IsActive, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged }" Margin="5" Width="30" HorizontalAlignment="Left" />

                <Label Grid.Row="3" Grid.Column="3" Content="Start Date:" Margin="5" Width="auto" />
                <DatePicker Grid.Row="3" Grid.Column="4" Width="120"
                                SelectedDate="{Binding Model.StartDate, StringFormat=\{0:MMM-dd-yyyy\},  
                        Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}" BorderThickness="0" />
            </Grid>
        </DockPanel>

        <!--GridSplitter-->
        <GridSplitter Grid.Row="1" Margin="2" Height="5"/>

        <DockPanel Grid.Row="2" Margin="5">
            <StackPanel Orientation="Horizontal">
                <Button Content="Add New Skill" Command="{Binding AddNewSkillCommand}" Margin="2" Width="85" Height="26"/>
                <Separator Margin="2" />
                <Button Content="Delete Skill" Command="{Binding DeleteSkillCommand}" Margin="2" Width="85" Height="26"/>
                <Separator Margin="2"/>
                <Button Content="Move Up" Command="{Binding MoveSkillUpCommand}" Margin="2" Width="85" Height="26"/>
                <Separator Margin="2"/>
                <Button Content="Move Down" Command="{Binding MoveSkillDownCommand}" Margin="2" Width="85" Height="26"/>
            </StackPanel>
        </DockPanel>

        <DockPanel Grid.Row="3">
            <DataGrid x:Name="DgvEmployeeSkills"
                      Margin="2"
                      AlternationCount="2"
                      CanUserAddRows="False"
                      SelectionMode="Single"
                      AutoGenerateColumns="False"
                      GridLinesVisibility="All"
                      HorizontalScrollBarVisibility="Visible"
                      VerticalScrollBarVisibility="Visible"
                      ColumnHeaderStyle="{StaticResource LowerCaseColHeaderStyle}"
                      ItemsSource="{Binding SkillsView}"
                      SelectedItem="{Binding SelectedSkill}"
                      IsSynchronizedWithCurrentItem="True">

                <!--Styles to make the selected row's text visible to user-->
                <DataGrid.CellStyle>
                    <Style TargetType="{x:Type DataGridCell}">
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Setter Property="Foreground" Value="Black" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.CellStyle>

                <DataGrid.Columns>
                    <!--Index Column-->
                    <DataGridTextColumn Header="Index" Width="65" IsReadOnly="True" Binding="{Binding SortIndex}" CanUserSort="False" />

                    <!--Path Column-->
                    <DataGridTextColumn Header="Skill" 
                                        Width="*"
                                        CanUserSort="False"
                                        IsReadOnly="False"
                                        EditingElementStyle="{StaticResource errorStyle}"
                                        Binding="{Binding Skill, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}">
                    </DataGridTextColumn>

                    <!--Server Only-->
                    <DataGridTemplateColumn Header="Is Favorite" Width="100" IsReadOnly="False" CanUserSort="False">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <CheckBox VerticalAlignment="Center" Margin="3"
                                              IsChecked="{Binding IsFavorite, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                              Command="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=DataContext.IsFavoriteCheckBoxCommand}" />
                                </StackPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>

                </DataGrid.Columns>

            </DataGrid>
        </DockPanel>

        <StatusBar HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Grid.Row="4" Margin="2,0,2,2">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="2*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="2*" />
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>
            <StatusBarItem Grid.Row="0" Grid.Column="1">
                <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                    <StackPanel.Resources>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Margin" Value="0,0,5,0" />
                            <Style.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" Value="0.5" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Resources>
                    <Button Width="75"
                        Margin="0,0,10,0"
                        Command="{Binding SaveCommand, Mode=OneTime}"
                        ToolTipService.ShowOnDisabled="True">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Save" />
                        </StackPanel>
                        <Button.ToolTip>
                            <ToolTip Visibility="{Binding HasErrors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <StackPanel>
                                    <StackPanel.Resources>
                                        <DataTemplate DataType="{x:Type attributeValidation:CompositeValidationResult}">
                                            <ItemsControl ItemsSource="{Binding Results, Mode=OneWay}" />
                                        </DataTemplate>

                                        <DataTemplate DataType="{x:Type da:ValidationResult}">
                                            <TextBlock Text="{Binding ErrorMessage, Mode=OneWay, StringFormat='• {0}'}" />
                                        </DataTemplate>
                                    </StackPanel.Resources>

                                    <TextBlock Text="The following errors must be fixed before you can save:" />
                                    <ItemsControl Margin="10,0,0,0" ItemsSource="{Binding AllErrors, Mode=OneWay}" />
                                </StackPanel>
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>

                    <Button Width="75"
                        Command="{Binding CancelCommand, Mode=OneTime}"
                        Content="Cancel" />
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</controls:MetroWindow>
