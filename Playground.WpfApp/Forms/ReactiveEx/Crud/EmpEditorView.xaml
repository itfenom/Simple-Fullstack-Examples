<controls:MetroWindow 
    x:Class="Playground.WpfApp.Forms.ReactiveEx.Crud.EmpEditorView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:Playground.WpfApp.Forms.ReactiveEx.Crud"
    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:behaviors="clr-namespace:Playground.WpfApp.Behaviors"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:da="clr-namespace:System.ComponentModel.DataAnnotations;assembly=System.ComponentModel.DataAnnotations"
    xmlns:bdvcore="clr-namespace:Playground.WpfApp.Mvvm.AttributedValidation"
    xmlns:converters="clr-namespace:Playground.WpfApp.Converters"
    mc:Ignorable="d"
    BorderBrush="{DynamicResource AccentColorBrush}"
    BorderThickness="1"
    GlowBrush="{DynamicResource AccentColorBrush}"
    ResizeMode="CanResizeWithGrip"
    UseLayoutRounding="True"
    WindowStartupLocation="CenterScreen"
    WindowTransitionsEnabled="True"
    TitleCharacterCasing="Normal"
    Title="{Binding Title}" Height="450" Width="650">

    <i:Interaction.Behaviors>
        <behaviors:CloseWindowBehavior CloseTrigger="{Binding CloseWindowFlag}" />
    </i:Interaction.Behaviors>

    <controls:MetroWindow.Resources>
        <ResourceDictionary>

            <ItemsPanelTemplate x:Key="Vsp">
                <VirtualizingStackPanel/>
            </ItemsPanelTemplate>

            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="controls:ButtonHelper.PreserveTextCase" Value="True" />
            </Style>

            <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"/>

        </ResourceDictionary>
    </controls:MetroWindow.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition />
            <ColumnDefinition />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <Border Grid.ColumnSpan="2"
                BorderBrush="DarkGray"
                BorderThickness="0,0,0,1">
            <UniformGrid Margin="5" Columns="3">

                <CheckBox Margin="0,0,10,0"
                          Content="Select All"
                          IsChecked="{Binding AreAllProductsSelected, Mode=TwoWay}"
                          IsEnabled="{Binding CanSelectProducts, Mode=OneWay}"
                          IsThreeState="True" />

                <CheckBox Margin="0,0,10,0"
                          HorizontalAlignment="Center"
                          Content="Show Selected"
                          IsChecked="{Binding FilterBySelectedProducts, Mode=TwoWay}" />

                <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                    <TextBlock Text="{Binding SelectedSkillCount, StringFormat='Selected skills: {0,3:##0}', Mode=OneWay, FallbackValue='Selected skills: 0'}" />
                </StackPanel>
            </UniformGrid>
        </Border>

        <DataGrid x:Name="DgvSkills"
                  Grid.Row="1"
                  AutoGenerateColumns="False"
                  BorderBrush="DarkGray"
                  BorderThickness="0,0,1,0"
                  CanUserAddRows="False"
                  CanUserDeleteRows="False"
                  CanUserReorderColumns="False"
                  CanUserResizeRows="False"
                  GridLinesVisibility="Horizontal"
                  HeadersVisibility="Column"
                  ItemsSource="{Binding SkillCollectionView}"
                  SelectionMode="Single"
                  SelectionUnit="Cell">

            <DataGrid.RowStyle>
                <Style BasedOn="{StaticResource MetroDataGridRow}" TargetType="{x:Type DataGridRow}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}, Mode=FindAncestor}}" Value="True">
                            <Setter Property="Background" Value="LightGray" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>

            <DataGrid.Columns>
                <DataGridTemplateColumn MinWidth="25">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox Margin="5,0,0,0"
                                      VerticalAlignment="Center"
                                      IsChecked="{Binding IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Width="*"
                                    Binding="{Binding Skill, Mode=OneWay}"
                                    Header="Skills">
                    <DataGridTextColumn.HeaderTemplate>
                        <DataTemplate>
                            <StackPanel HorizontalAlignment="Stretch">
                                <TextBlock Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                <TextBox Style="{StaticResource FilterTextBoxStyles}" Width="240" Text="{Binding DataContext.SkillFilter, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}, Mode=FindAncestor}, UpdateSourceTrigger=PropertyChanged}" />
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTextColumn.HeaderTemplate>
                </DataGridTextColumn>
            </DataGrid.Columns>
        </DataGrid>

        <Grid Grid.Row="1"
              Grid.Column="1"
              Margin="5,10,10,10">
            <Grid.Resources>
                <Style BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type TextBox}">
                    <Setter Property="Margin" Value="5,0,0,5" />
                </Style>

                <Style BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}">
                    <Setter Property="Margin" Value="5,0,0,5" />
                </Style>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <TextBlock Grid.Row="0"
                       Grid.Column="0"
                       Text="First Name" />
            <TextBox Grid.Row="0"
                      Grid.Column="1"
                      Text="{Binding Model.FirstName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True, ValidatesOnDataErrors=True, ValidatesOnNotifyDataErrors=True}"/>

            <TextBlock Grid.Row="1"
                       Grid.Column="0"
                       Text="Last Name" />
            <TextBox Grid.Row="1"
                     Grid.Column="1"
                     Text="{Binding Model.LastName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True, ValidatesOnDataErrors=True, ValidatesOnNotifyDataErrors=True}"/>

            <TextBlock Grid.Row="2"
                       Grid.Column="0"
                       Text="Salary" />
            <TextBox Grid.Row="2"
                     Grid.Column="1"
                     Text="{Binding Model.Salary, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True, ValidatesOnDataErrors=True, ValidatesOnNotifyDataErrors=True}" />

            <TextBlock Grid.Row="3"
                       Grid.Column="0"
                       Text="Job Title" />
            <ComboBox Grid.Row="3"
                      Grid.Column="1"
                      IsSynchronizedWithCurrentItem="True"
                      ItemsSource="{Binding AllJobTitles, Mode=OneTime}"
                      ItemsPanel="{StaticResource Vsp}"
                      SelectedItem="{Binding Model.JobTitle, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True, ValidatesOnDataErrors=True, ValidatesOnNotifyDataErrors=True}"
                      Text="Select Option" />

            <TextBlock Grid.Row="4"
                       Grid.Column="0"
                       Text="Dept" />
            <ComboBox Grid.Row="4"
                      Grid.Column="1"
                      DisplayMemberPath="DepartmentName"
                      IsSynchronizedWithCurrentItem="True"
                      ItemsSource="{Binding AllDepartments, Mode=OneTime}"
                      ItemsPanel="{StaticResource Vsp}"
                      SelectedItem="{Binding Model.DepartmentId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnValidationError=True, ValidatesOnDataErrors=True, ValidatesOnNotifyDataErrors=True}"
                      Text="Select Option" />

            <TextBlock Grid.Row="5"
                       Grid.Column="0"
                       Text="Ratings" />
            <controls:NumericUpDown Grid.Row="5" Grid.Column="1"  
                                    Value="{Binding Model.Rating, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}"/>

            <TextBlock Grid.Row="6"
                       Grid.Column="0"
                       Text="IsActive" />
            <CheckBox Grid.Row="6" Grid.Column="1" IsChecked="{Binding Model.IsActive, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged }" Margin="5" />

            <TextBlock Grid.Row="7" Grid.Column="0" Text="Hire Date:" Margin="2" />
            <DatePicker Grid.Row="7" Grid.Column="1" SelectedDate="{Binding Model.StartDate, StringFormat=\{0:MMM-dd-yyyy\}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}" BorderThickness="0" />


        </Grid>

        <Border Grid.Row="2"
                Grid.ColumnSpan="2"
                Padding="10"
                Background="{StaticResource GrayBrush10}"
                BorderBrush="{StaticResource AccentBaseColorBrush}"
                BorderThickness="0,2,0,0"
                Visibility="{Binding IsReadOnly, Mode=OneWay, Converter={converters:BoolToVisibilityConverter IsReversed=True}}">
            <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                <StackPanel.Resources>
                    <Style TargetType="{x:Type Image}">
                        <Setter Property="Margin" Value="0,0,5,0" />
                        <Style.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.5" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </StackPanel.Resources>
                <Button Width="75"
                        Margin="0,0,10,0"
                        Command="{Binding SaveCommand, Mode=OneTime}"
                        ToolTipService.ShowOnDisabled="True">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Save" />
                    </StackPanel>
                    <Button.ToolTip>
                        <ToolTip Visibility="{Binding HasErrors, Converter={StaticResource booleanToVisibilityConverter}}">
                            <StackPanel>
                                <StackPanel.Resources>
                                    <DataTemplate DataType="{x:Type bdvcore:CompositeValidationResult}">
                                        <ItemsControl ItemsSource="{Binding Results, Mode=OneWay}" />
                                    </DataTemplate>

                                    <DataTemplate DataType="{x:Type da:ValidationResult}">
                                        <TextBlock Text="{Binding ErrorMessage, Mode=OneWay, StringFormat='• {0}'}" />
                                    </DataTemplate>
                                </StackPanel.Resources>

                                <TextBlock Text="The following errors must be fixed before you can save:" />
                                <ItemsControl Margin="10,0,0,0" ItemsSource="{Binding AllErrors, Mode=OneWay}" />
                            </StackPanel>
                        </ToolTip>
                    </Button.ToolTip>
                </Button>

                <Button Width="75"
                        Command="{Binding CancelCommand, Mode=OneTime}"
                        Content="Cancel" />
            </StackPanel>
        </Border>
    </Grid>
</controls:MetroWindow>
