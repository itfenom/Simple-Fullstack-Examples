CREATE OR REPLACE PACKAGE TEST_PKG AS 

--SET SERVEROUTPUT ON;
--DBMS_OUTPUT.PUT_LINE('');
TYPE T_COUNTRY_RECORD IS RECORD(COUNTRY_ID NUMBER, COUNTRY_NAME VARCHAR2(50), COUNTRY_ABBR VARCHAR2(20), COUNTRY_CODE VARCHAR2(10));
TYPE T_COUNTRY_TABLE IS TABLE OF T_COUNTRY_RECORD INDEX BY BINARY_INTEGER;
TYPE T_NAMES IS TABLE OF VARCHAR2(255) INDEX BY PLS_INTEGER;

PROCEDURE  PROC_DISPLAY_GREETINGS(P_NAME_IN IN VARCHAR2);

FUNCTION GET_WELCOME_MSG(P_NAME_IN IN VARCHAR2) 
         RETURN VARCHAR2;
         
FUNCTION GET_ALL_COUNTRIES RETURN T_COUNTRY_TABLE;

END TEST_PKG;
/


CREATE OR REPLACE PACKAGE BODY TEST_PKG AS

 PROCEDURE  PROC_DISPLAY_GREETINGS(P_NAME_IN IN VARCHAR2) 
    AS
    BEGIN
  
         DBMS_OUTPUT.PUT_LINE(GET_WELCOME_MSG(P_NAME_IN));
         
  END PROC_DISPLAY_GREETINGS;
  
 FUNCTION GET_WELCOME_MSG(P_NAME_IN IN VARCHAR2)
          RETURN VARCHAR2
    AS
    BEGIN
      RETURN 'Hi, ' || P_NAME_IN;
 END;

 FUNCTION GET_ALL_COUNTRIES 
          RETURN T_COUNTRY_TABLE
  AS
         V_RET_VAL T_COUNTRY_TABLE;
  BEGIN
         V_RET_VAL(1).COUNTRY_ID   := 1;
         V_RET_VAL(1).COUNTRY_NAME := 'United States of America';
         V_RET_VAL(1).COUNTRY_ABBR := 'USA';
         V_RET_VAL(1).COUNTRY_CODE := '001';
          
         V_RET_VAL(2).COUNTRY_ID   := 2;
         V_RET_VAL(2).COUNTRY_NAME := 'Mexico';
         V_RET_VAL(2).COUNTRY_ABBR := 'MEX';
         V_RET_VAL(2).COUNTRY_CODE := '0052';
          
         V_RET_VAL(3).COUNTRY_ID   := 3;
         V_RET_VAL(3).COUNTRY_NAME := 'Kingdom of Saudi Arabia';
         V_RET_VAL(3).COUNTRY_ABBR := 'KSA';
         V_RET_VAL(3).COUNTRY_CODE := '00966';
         
         RETURN V_RET_VAL;
  END GET_ALL_COUNTRIES;

/***************** Returning a REF Cursor example ******************************
 TYPE USER_REF_CURSOR IS REF CURSOR RETURN <TABLE_NAME>%ROWTYPE;
 
 PROCEDURE GetAllUsers(P_REF_OUT OUT USER_REF_CURSOR)
 AS 
 BEGIN
       OPEN P_REF_OUT FOR 
       SELECT * FROM <TABLE_NAME>;
 END GetAllUsers;
 
 -------------- Associative Arrays -------------------------------          
 
 PROCEDURE PROC_GET_ASSOCIATIVE_ARRAYS(P_NAMES_OUT OUT T_USER_NAMES, 
                                       P_IDS_OUT OUT T_IDS) 
  AS
        V_COUNTER NUMBER;
        
        CURSOR APP_USER_CURSOR IS
        SELECT "ID", LOGIN_NAME 
        FROM APP_USER 
        ORDER BY "ID";
        
        ROW_APP_USER_CURSOR APP_USER_CURSOR%ROWTYPE;
        
  BEGIN
         V_COUNTER := 1;
         OPEN APP_USER_CURSOR;
         LOOP
                 FETCH APP_USER_CURSOR INTO ROW_APP_USER_CURSOR;
                 EXIT WHEN APP_USER_CURSOR%NOTFOUND;
                 P_NAMES_OUT(V_COUNTER) := ROW_APP_USER_CURSOR.LOGIN_NAME;
                 P_IDS_OUT(V_COUNTER) := ROW_APP_USER_CURSOR."ID";
                 V_COUNTER := V_COUNTER + 1;       
         END LOOP;
         
  END PROC_GET_ASSOCIATIVE_ARRAYS;

*******************************************************************************/

END TEST_PKG;
/
