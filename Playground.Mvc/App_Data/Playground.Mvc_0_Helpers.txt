Add Folder "Helpers"


DownloadExcelFileActionResult.cs:
using System;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Mvc;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace SeraphWeb.Mvc.Helpers
{
    public class DownloadExcelFileActionResult : ActionResult
    {
        public GridView ExcelGridView { get; set; }
        public string fileName { get; set; }

        public DownloadExcelFileActionResult(GridView gv, string pFileName)
        {
            ExcelGridView = gv;
            fileName = pFileName;
        }

        public override void ExecuteResult(ControllerContext context)
        {

            //Create a response stream to create and write the Excel file
            HttpContext curContext = HttpContext.Current;
            curContext.Response.Clear();
            curContext.Response.AddHeader("content-disposition", "attachment;filename=" + fileName);
            curContext.Response.Charset = "";
            curContext.Response.Cache.SetCacheability(HttpCacheability.NoCache);
            curContext.Response.ContentType = "application/vnd.ms-excel";

            //Convert the rendering of the gridview to a string representation 
            StringWriter sw = new StringWriter();
            HtmlTextWriter htw = new HtmlTextWriter(sw);
            ExcelGridView.RenderControl(htw);

            //Open a memory stream that you can use to write back to the response
            byte[] byteArray = Encoding.ASCII.GetBytes(sw.ToString());
            MemoryStream s = new MemoryStream(byteArray);
            StreamReader sr = new StreamReader(s, Encoding.ASCII);

            //Write the stream back to the response
            curContext.Response.Write(sr.ReadToEnd());
            curContext.Response.End();
        }

    }
}
---------------------------------------------------------------------------------------------------------------------
FlexigridExtensions.cs:

using System;
using System.Linq;
using System.Linq.Expressions;

namespace SeraphWeb.Mvc.Helpers
{
    public static class FlexigridExtensions
    {
        public static IQueryable<T> OrderBy<T>(this IQueryable<T> source, string propertyName, bool asc)
        {
            var type = typeof(T);
            string methodName = asc ? "OrderBy" : "OrderByDescending";
            var property = type.GetProperty(propertyName);
            var parameter = Expression.Parameter(type, "p");
            var propertyAccess = Expression.MakeMemberAccess(parameter, property);
            var orderByExp = Expression.Lambda(propertyAccess, parameter);
            MethodCallExpression resultExp = Expression.Call(typeof(Queryable), methodName, new Type[] { type, property.PropertyType }, source.Expression, Expression.Quote(orderByExp));
            return source.Provider.CreateQuery<T>(resultExp);
        }

        public static IQueryable<T> Like<T>(this IQueryable<T> source, string propertyName, string keyword)
        {
            var type = typeof(T);
            var property = type.GetProperty(propertyName);
            var parameter = Expression.Parameter(type, "p");
            var propertyAccess = Expression.MakeMemberAccess(parameter, property);
            var constant = Expression.Constant(keyword);

            var like = typeof(string).GetMethod("Contains",
                       new Type[] { typeof(string) });
            MethodCallExpression methodExp = Expression.Call(propertyAccess, like, constant);
            Expression<Func<T, bool>> lambda =
                  Expression.Lambda<Func<T, bool>>(methodExp, parameter);
            return source.Where(lambda);
        }
    }
}

---------------------------------------------------------------------------------------------------------------------
HelperTools.cs:

using System;
using System.Web.Mvc;

namespace SeraphWeb.Mvc.Helpers
{
    public static class HelperTools
    {
        //Creates Hyperlink!
        public static MvcHtmlString HyperLink(this HtmlHelper html, string url, string linkText)
        {
            return MvcHtmlString.Create(String.Format("<a href='{0}'>{1}</a>", url, linkText));
        }
    }
}
---------------------------------------------------------------------------------------------------------------------
OverrideAuthorizeClass.cs:

using System;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace SeraphWeb.Mvc.Helpers
{
    //Decorate this class attribute to the controller which requires additional authentication.
    public class OverrideAuthorizeClass : AuthorizeAttribute
    {
        public override void OnAuthorization(AuthorizationContext filterContext)
        {
            if (filterContext == null)
            {
                throw new ArgumentNullException("filterContext");
            }

            if (AuthorizeCore(filterContext.HttpContext))
            {
                base.OnAuthorization(filterContext);
            }
            else
            {
                filterContext.Result = new RedirectToRouteResult(new
                RouteValueDictionary(new { controller = "RestrictedControllerName", action = "PageToRedirectIfNotAuthorized<AccessDenied>" }));
            }
        }

        protected override bool AuthorizeCore(HttpContextBase httpContext)
        {
            bool _retVal = false;

            /*************************************************
             * This is where the logic goes that determines if the user was authorized to view this page!!!
             *             
                IMyRepository _repository = new MyRepository(new DataContext());
                string _userName = httpContext.User.Identity.Name.ToLower().Replace("corp", "").Replace("tqs", "").Replace(@"\", "").Trim();
     
                if (_repository.UserCanViewPage(_userName))
                {
                    _retVal = true;
                }
            *************************************************/

            return _retVal;
        }
    }
}
---------------------------------------------------------------------------------------------------------------------
WebgridExtensions.cs:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace SeraphWeb.Mvc.Helpers
{
    public static class WebgridExtensions
    {
        public static IOrderedEnumerable<TSource> OrderByWithDirection<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, bool descending)
        {
            return descending ? source.OrderByDescending(keySelector)
                              : source.OrderBy(keySelector);
        }

        public static IOrderedQueryable<TSource> OrderByWithDirection<TSource, TKey>(this IQueryable<TSource> source, Expression<Func<TSource, TKey>> keySelector, bool descending)
        {
            return descending ? source.OrderByDescending(keySelector)
                              : source.OrderBy(keySelector);
        }
    }
}
---------------------------------------------------------------------------------------------------------------------
ExceptionUtility:

using System;
using System.IO;
using System.Web;

namespace SeraphWeb.Mvc.Helpers
{
    // Create our own utility for exceptions
    public sealed class ExceptionUtility
    {
        // All methods are static, so this can be private
        private ExceptionUtility()
        { }

        // Log an Exception
        public static void LogException(Exception exc, string source)
        {
            // Include logic for logging exceptions
            // Get the absolute path to the log file
            string logFile = "App_Data/ErrorLog.txt";
            logFile = HttpContext.Current.Server.MapPath(logFile);

            // Open the log file for append and write the log
            StreamWriter sw = new StreamWriter(logFile, true);
            sw.WriteLine("********** {0} **********", DateTime.Now);
            if (exc.InnerException != null)
            {
                sw.Write("Inner Exception Type: ");
                sw.WriteLine(exc.InnerException.GetType().ToString());
                sw.Write("Inner Exception: ");
                sw.WriteLine(exc.InnerException.Message);
                sw.Write("Inner Source: ");
                sw.WriteLine(exc.InnerException.Source);
                if (exc.InnerException.StackTrace != null)
                {
                    sw.WriteLine("Inner Stack Trace: ");
                    sw.WriteLine(exc.InnerException.StackTrace);
                }
            }
            sw.Write("Exception Type: ");
            sw.WriteLine(exc.GetType().ToString());
            sw.WriteLine("Exception: " + exc.Message);
            sw.WriteLine("Source: " + source);
            sw.WriteLine("Stack Trace: ");
            if (exc.StackTrace != null)
            {
                sw.WriteLine(exc.StackTrace);
                sw.WriteLine();
            }
            sw.Close();
        }
    }
}

---------------------------------------------------------------------------------------------------------------------
SessionSingleton.cs:


using System;
using System.Web;

namespace SeraphWeb.Mvc.Helpers
{
    [Serializable]
    public class SessionSingleton
    {
        #region Singleton

        private const string SESSION_SINGLETON_NAME = "Singleton_502E69E5-668B-E011-951F-00155DF26207";
        private int _cartItemCount = 0;

        private SessionSingleton()
        {

        }

        public static SessionSingleton Current
        {
            get
            {
                if (HttpContext.Current.Session[SESSION_SINGLETON_NAME] == null)
                {
                    HttpContext.Current.Session[SESSION_SINGLETON_NAME] = new SessionSingleton();
                }

                return HttpContext.Current.Session[SESSION_SINGLETON_NAME] as SessionSingleton;
            }
        }

        #endregion

        public int ID { get; set; }
        public string UserName { get; set; }
        public string DisplayName { get; set; }
        public string RoleName { get; set; }
        public int RoleID { get; set; }

        public int CartItemCount
        {
            get
            {
                return _cartItemCount;
            }
            set
            {
                _cartItemCount = value;
            }
        }
    }
}