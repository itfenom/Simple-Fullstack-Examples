SeraphWeb.Mvc_05_Flexigrid:

- Copy Add/Edit/Delete icons into Content/Flexigird/images folder:
- Update flexigrid.css with the following codes:

.flexigrid .add {
    background: url(images/FG_Add.png) no-repeat left;
    height: 20px;
}

.flexigrid .edit {
    background: url(images/FG_Edit.png) no-repeat left;
    height: 20px;
}

.flexigrid .delete {
    background: url(images/FG_Delete.png) no-repeat left;
    height: 20px;
}

- Add Controller "FlexigridEmployeeMgr":

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using SeraphMvcBootstrap.Website.Helpers;
using SeraphMvcBootstrap.Website.DAL;
using SeraphMvcBootstrap.Website.Models;

namespace SeraphMvcBootstrap.Website.Controllers
{
    public class FlexigridEmployeeMgrController : BaseController
    {
        private IEmployeeRepository _repository;

        public FlexigridEmployeeMgrController()
        {
            _repository = new EmployeeRepository(new SeraphEntities());
        }

        public ActionResult Index()
        {
            return View();
        }

        public ActionResult EmployeesList(int page, int rp, string sortname, string sortorder, string qtype, string query)
        {
            var _allEmployees = _repository.GetAllEmployeeDataNoPhoto().AsQueryable();

            int _total = _allEmployees.Count();

            if (!string.IsNullOrEmpty(qtype) && !string.IsNullOrEmpty(query))
            {
                _allEmployees = _allEmployees.Like(qtype, query);
            }

            if (!string.IsNullOrEmpty(sortname) && !string.IsNullOrEmpty(sortorder))
            {
                _allEmployees = _allEmployees.OrderBy(sortname, sortorder == "asc");
            }

            _allEmployees = _allEmployees.Skip((page - 1) * rp).Take(rp);

            return CreateFlexiJson(_allEmployees.ToList(), page, _total);
        }

        [HttpPost]
        public ActionResult SaveEmployee(EmployeeViewModel employeeObj)
        {
            if (employeeObj.EmpID == 0) // if ID == 0, its a new entry
            {
                EMPLOYEE _e = new EMPLOYEE();
                _e.EMP_NAME = employeeObj.EmpName;
                _e.EMP_EMAIL = employeeObj.EmpEmail;
                _e.EMP_PHONE = employeeObj.EmpPhone;
                _e.EMP_SALARY = employeeObj.EmpSalary;
                _e.EMP_HIRE_DATE = DateTime.Today;
                _e.EMP_GENDER = employeeObj.EmpGender;
                _e.EMP_PHOTO = null;
                _e.EMP_IS_ACTIVE = true;

                _repository.AddNewEmployee(_e);
            }
            else if (employeeObj.EmpID > 0) //if ID field is not 0, it is an update!!!
            {
                EMPLOYEE _e = new EMPLOYEE();
                _e.EMP_ID = employeeObj.EmpID;
                _e.EMP_NAME = employeeObj.EmpName;
                _e.EMP_EMAIL = employeeObj.EmpEmail;
                _e.EMP_PHONE = employeeObj.EmpPhone;
                _e.EMP_SALARY = employeeObj.EmpSalary;
                _e.EMP_HIRE_DATE = Convert.ToDateTime(employeeObj.EmpHireDate);
                _e.EMP_GENDER = employeeObj.EmpGender;
                _e.EMP_PHOTO = null;
                _e.EMP_IS_ACTIVE = employeeObj.EmpIsActive ;

                _repository.UpdateEmployee(_e);
            }
            var _employees = _repository.GetAllEmployeeDataNoPhoto().OrderByDescending(x => x.EmpID).AsQueryable();
            return CreateFlexiJson(_employees.ToList(), 1, _employees.Count());
        }

        [HttpPost]
        public ActionResult DeleteEmployee(int employeeID)
        {
            ViewBag.Message = "Employee Deleted successfully!";
            var _employees = _repository.GetAllEmployeeDataNoPhoto().OrderByDescending(x => x.EmpID).AsQueryable();
            return CreateFlexiJson(_employees.ToList(), 1, _employees.Count());
        }

        private JsonResult CreateFlexiJson(IEnumerable<EmployeeViewModel> items, int page, int total)
        {
            return Json(new
            {
                page,
                total,
                rows = items.Select(x => new
                {
                    id = x.EmpID,
                    cell = new object[] 
                    {    // The Cell values needs to be in the same order that they supposed to appear on the FlexiGrid!
                        x.EmpID,
                        x.EmpName, 
                        x.EmpEmail, 
                        x.EmpPhone, 
                        x.HireDate, 
                        x.IsActive, 
                        x.Salary, 
                        x.EmpGender
                    }
                })
            }, JsonRequestBehavior.AllowGet);
        }
	}
}

- Add Flexigrid Extension methods in Helpers/FlexigridExtensions:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Web;

namespace SeraphMvcBootstrap.Website.Helpers
{
    public static class FlexigridExtensions
    {
        public static IQueryable<T> OrderBy<T>(this IQueryable<T> source, string propertyName, bool asc)
        {
            var type = typeof(T);
            string methodName = asc ? "OrderBy" : "OrderByDescending";
            var property = type.GetProperty(propertyName);
            var parameter = Expression.Parameter(type, "p");
            var propertyAccess = Expression.MakeMemberAccess(parameter, property);
            var orderByExp = Expression.Lambda(propertyAccess, parameter);
            MethodCallExpression resultExp = Expression.Call(typeof(Queryable), methodName, new Type[] { type, property.PropertyType }, source.Expression, Expression.Quote(orderByExp));
            return source.Provider.CreateQuery<T>(resultExp);
        }

        public static IQueryable<T> Like<T>(this IQueryable<T> source, string propertyName, string keyword)
        {
            var type = typeof(T);
            var property = type.GetProperty(propertyName);
            var parameter = Expression.Parameter(type, "p");
            var propertyAccess = Expression.MakeMemberAccess(parameter, property);
            var constant = Expression.Constant(keyword);

            var like = typeof(string).GetMethod("Contains",
                       new Type[] { typeof(string) });
            MethodCallExpression methodExp = Expression.Call(propertyAccess, like, constant);
            Expression<Func<T, bool>> lambda =
                  Expression.Lambda<Func<T, bool>>(methodExp, parameter);
            return source.Where(lambda);
        }
    }
}

- Add Index View:
@{
    ViewBag.Title = "Employee Manager - FlexiGrid";
}

<link href="@Url.Content("~/Content/flexigrid/flexigrid.css")" rel="stylesheet" />

<div id="add-edit-dialog" style="display: none" title="Add / Edit Employee Info">
    <form id="add-edit-form">
        <div id="messageBox" style="color:red">
        </div>
        <fieldset>
            <legend></legend>
            <input type="hidden" name="itemDateHired" id="itemDateHired">
            <input type="hidden" name="itemEmpID" id="itemEmpID" />
            <label for="txtEmpName">Name</label><br />
            <input type="text" name="txtEmpName" id="txtEmpName" /><br />
            <label for="txtEmpEmail">Email</label><br />
            <input type="text" id="txtEmpEmail" name="txtEmpEmail" /><br />
            <label for="txtEmpPhone">Phone</label><br />
            <input type="text" name="txtEmpPhone" id="txtEmpPhone" /><br />
            <label for="txtEmpSalary">Salary</label><br />
            <input type="text" name="txtEmpSalary" id="txtEmpSalary" value="" /><br /><br />

            <input type="radio" name="Gender" value="M" class="rbGender" /> Male<br />
            <input type="radio" name="Gender" value="F" class="rbGender" /> Female<br /><br />

            <label for="ddIsActive">Active?</label><br />
            <select id="ddIsActive" name="ddIsActive">
                <option>Please Select...</option>
                <option>No</option>
                <option>Yes</option>
            </select>
        </fieldset>
    </form>
</div>

<br />
<br />
<br />

<table id="tblFlexiGrid" style="display: none"></table>

@section Scripts {

@Scripts.Render("~/bundles/flexigrid")
@Scripts.Render("~/bundles/jqueryui")
    <script type="text/javascript">

        $('#tblFlexiGrid').flexigrid({
            url: '@Url.Content("/FlexiGridEmployeeMgr/EmployeesList")',
            dataType: 'json',
            colModel: [{ display: 'ID', name: 'EmpID', width: 80, sortable: true, align: 'right' },
                       { display: 'Name', name: 'EmpName', sortable: true, width: 230, align: 'left' },
                       { display: 'Email', name: 'EmpEmail', sortable: true, width: 250, align: 'left' },
                       { display: 'Phone', name: 'EmpPhone', sortable: true, width: 130, align: 'left' },
                       { display: 'Hire Date', name: 'HireDate', sortable: true, width: 130, align: 'left' },
                       { display: 'Active?', name: 'IsActive', sortable: true, width: 100, align: 'left' },
                       { display: 'Salary', name: 'Salary', sortable: true, width: 100, align: 'left' },
                       { display: 'Gender', name: 'EmpGender', sortable: true, width: 100, align: 'left' }],

            buttons: [{ name: 'Add', bclass: 'add', onpress: test },
                      { name: 'Edit', bclass: 'edit', onpress: test },
                      { name: 'Delete', bclass: 'delete', onpress: test },
                      { separator: true }],

            searchitems: [{ display: 'Name', name: 'EmpName', isdefault: true },
                          { display: 'Email', name: 'EmpEmail' },
                          { display: 'Active?', name: 'IsActive' },
                          { display: 'Salary', name: 'Salary' },
                          { display: 'Gender', name: 'EmpGender' }],

        sortname: "EmpID",
        sortorder: "asc",
        usepager: true,
        title: 'Employee Manager using jQuery FlexiGrid',
        useRp: true,
        rp: 10,
        showTableToggleBtn: true,
        width: 200,
        height: 235,
        singleSelect: true
    });

    function test(com, grid) {
        var selectedRows = $('.trSelected', grid).length;
        var selectedRowID;
        $('.trSelected', grid).each(function () {
            selectedRowID = $(this).attr('id');
            selectedRowID = selectedRowID.substring(selectedRowID.lastIndexOf('row') + 3);
        });

        if (com == 'Add') {
            $('.rbGender[value="M"]').prop('checked', false);
            $('.rbGender[value="F"]').prop('checked', false);
            $('#messageBox').empty();
            $("#add-edit-dialog").dialog("open");
        }
        else if (com == 'Edit' && selectedRows > 0) {

            if (selectedRows == 1) {

                $('.rbGender[value="M"]').prop('checked', false);
                $('.rbGender[value="F"]').prop('checked', false);
                $('#messageBox').empty();

                $('.trSelected', grid).each(function () {
                    setFormFieldsForEdit(selectedRowID,
                        $('td[abbr="EmpName"] >div', this).html(),
                        $('td[abbr="EmpEmail"] >div', this).html(),
                        $('td[abbr="EmpPhone"] >div', this).html(),
                        $('td[abbr="Salary"] >div', this).html(),
                        $('td[abbr="IsActive"] >div', this).html(),
                        $('td[abbr="HireDate"] >div', this).html(),
                        $('td[abbr="EmpGender"] >div', this).html());
                });

                $("#add-edit-dialog").dialog("open");
            }
            else {
                alert("No row was selected!");
                return false;
            }
        }
        else if (com == 'Delete' && selectedRows > 0) {
            if (selectedRows == 1) {
                var proceed = confirm('Delete ' + selectedRows + ' item(s)?' + '\n\rSelected Row ID: ' + selectedRowID);

                if (proceed) {
                    var _employeeID = selectedRowID;
                    $.ajax({
                        url: '@Url.Action("DeleteEmployee", "FlexiGridEmployeeMgr")',
                        type: 'POST',
                        data: { employeeID: _employeeID },
                        success: function (result) {
                            $('#tblFlexiGrid').flexAddData(result);
                            alert('The selected row deleted successfully!');
                        }
                    });
                }
            }
            else {
                alert("No row was selected!");
                return false;
            }
        }
    };
        var txtDateHired = $("#itemDateHired");
        var txtEmpID = $("#itemEmpID");
        var txtEmpName = $("#txtEmpName");
        var txtEmpEmail = $('#txtEmpEmail');
        var txtEmpPhone = $('#txtEmpPhone');
        var txtEmpSalary = $('#txtEmpSalary');
        var cboIsActive = $('#ddIsActive');

        function setFormFieldsForEdit(id, name, email, phone, salary, isActive, dateHired, gender) {
            txtEmpID.val(id);
            txtEmpName.val(name);
            txtEmpEmail.val(email);
            txtEmpPhone.val(phone);
            txtEmpSalary.val(salary);
            cboIsActive.val(isActive);
            txtDateHired.val(dateHired);

            if (gender == "F") {
                $('.rbGender[value="F"]').prop('checked', true);
                $('.rbGender[value="M"]').prop('checked', false);
            }
            else if (gender == "M") {
                $('.rbGender[value="M"]').prop('checked', true);
                $('.rbGender[value="F"]').prop('checked', false);
            }
        }

    $(document).ready(function () {

        Array.prototype.clear = function () {
            this.splice(0, this.length);
        };

        var errorList = new Array();
        errorList.clear();
        $('.rbGender[value="M"]').prop('checked', false);
        $('.rbGender[value="F"]').prop('checked', false);
        $('#messageBox').empty();

        $("#add-edit-dialog").dialog({
            autoOpen: false,
            height: 500,
            width: 290,
            modal: true,
            buttons: {
                "Save": function () {

                    if (ValidateInput()) {
                        //Create Javascript object with same properties that needs to be passed to the controller. Nice ;)
                        var employeeObj = {};

                        employeeObj.EmpID = txtEmpID.val();
                        employeeObj.EmpName = txtEmpName.val();
                        employeeObj.EmpEmail = txtEmpEmail.val();
                        employeeObj.EmpPhone = txtEmpPhone.val();
                        employeeObj.EmpSalary = txtEmpSalary.val();
                        employeeObj.EmpHireDate = txtDateHired.val();
                        employeeObj.EmpGender = $(".rbGender:checked").val();

                        if (txtEmpID.val().length == 0) { // if no id in the hidden field, we assume that it was a new entry!!!
                            employeeObj.EmpHireDate = new Date().toJSON().slice(0, 10);
                            employeeObj.EmpIsActive = 1;
                        }
                        else if (txtEmpID.val().length > 0) { // if id was not null, we are editing....
                            if (cboIsActive.val() == 'Yes') {
                                employeeObj.EmpIsActive = true;
                            }
                            else if (cboIsActive.val() == 'No') {
                                employeeObj.EmpIsActive = false;
                            }
                        }

                        $.ajax({
                            type: 'POST',
                            data: JSON.stringify(employeeObj),
                            url: '@Url.Action("SaveEmployee", "FlexiGridEmployeeMgr")',
                            dataType: 'json',
                            contentType: 'application/json',
                            success: function (result) {
                                $('#tblFlexiGrid').flexAddData(result);
                            }
                        });
                        $(this).dialog('close');
                    }
                    else {
                        return false;
                    }

                },
                Cancel: function () {
                    $(this).dialog("close");
                }
            },
            close: function () {
                setFormFieldsForEdit('', '', '', '', '', '');
            },
            open: function () {
            }
        });

        function ValidateInput() {

            var txtEmpNameField = $('#txtEmpName').val();
            var txtEmpEmailField = $('#txtEmpEmail').val();
            var txtEmpPhoneField = $('#txtEmpPhone').val();
            var txtEmpSalaryField = $('#txtEmpSalary').val();
            var ddIsActiveField = $('#ddIsActive').val();
            var genderVal = $("input[name='Gender']:checked").val();

            var isValidName = true;
            var isValidEmail = true;
            var isValidPhone = true;
            var isValidSalary = true;
            var isValidActive = true;
            var isValildGender = true;

            errorList.clear();
            $('#messageBox').empty();

            if (txtEmpNameField.length == 0) {
                errorList.push('* Name is required.<br/>');
                isValidName = false;
            }

            if (txtEmpEmailField.length == 0) {
                errorList.push('* Email is required.<br/>');
                isValidEmail = false;
            }
            else if (txtEmpEmailField.length > 0) {
                var emailReg = /^([\w-\.]+@@([\w-]+\.)+[\w-]{2,4})?$/;
                if (!emailReg.test(txtEmpEmailField)) {
                    errorList.push("* Not a valid email!");
                    isValidEmail = false;
                }
            }

            if (txtEmpPhoneField.length == 0) {
                errorList.push('* Phone is required.<br/>');
                isValidPhone = false;
            }
            else if (txtEmpPhoneField.length > 0) {
                var phoneReg = /^\(?(\d{3})\)?[- ]?(\d{3})[- ]?(\d{4})$/;
                if (!phoneReg.test(txtEmpPhoneField)) {
                    errorList.push('* Phone format must be:(000)000-0000<br/>');
                    isValidPhone = false;
                }
            }

            if (txtEmpSalaryField.length == 0) {
                errorList.push('* Salary is required.<br/>');
                isValidSalary = false;
            }
            else if (txtEmpSalaryField.length > 0) {
                var isNumericSalary = /^[0-9]+$/.test(txtEmpSalaryField);
                if (!isNumericSalary) {
                    errorList.push('* Salary must be numeric.<br/>');
                    isValidSalary = false;
                }
            }

            if (ddIsActiveField == 'Please Select...') {
                errorList.push('* Active is required.<br/>');
                isValidActive = false;
            }

            if (!(genderVal == 'M' || genderVal == 'F')) {
                errorList.push('* Gender is required.<br/>');
                isValidGender = false;
            }
            else {
                isValidGender = true;
            }

            if (errorList.length > 0) {
                for (var i = 0; i < errorList.length; i++) {
                    $('#messageBox').append(errorList[i]);
                }
            }

            if (isValidName && isValidEmail && isValidPhone && isValidSalary && isValidActive && isValidGender) {
                return true;
            }
            else {
                return false;
            }
        }
    });

    </script>
}