@model Playground.Mvc.Models.ManageXyzEmployeeModel
@using Newtonsoft.Json

@{
    ViewBag.Title = "Manage Employees using Knockout JS";
}

<link href="@Url.Content("~/Content/toastr.min.css")" rel="stylesheet" type="text/css" />

<h2>Manage Employees</h2>
<hr />

<div class="row">
    <button class="btn btn-primary" data-bind="click: function() { addNewEmployee() }">Add New Employee</button>
</div>

<div class="row" id="empInfoDiv">
    <div class="col-sm-5">
        <table class="table" style="width:100%;" id="empInfoTable">
            <thead class="bg-light">
                <tr>
                    <td>Name</td>
                    <td>Email</td>
                    <td>Gender</td>
                    <td>Delete</td>
                </tr>
            </thead>
            <tbody id="empInfo-tbody" data-bind="foreach: activeEmployees">
                <tr class="emp-info-row" data-bind="click: $root.selectEmployee, css: {selected: $root.selectedEmployee() == $data}">
                    <td><a href="#" class="emp-info-link" data-bind="text: employeeName, click: function() {$parent.selectEmployee($data)}"></a></td>
                    <td data-bind="text: email"></td>
                    <td data-bind="text: gender"></td>
                    <td>
                        <a href="#" class="delete" data-bind="click: function () { $parent.deleteEmployee(employeeId()) }"><i class="fa fa-trash"></i></a>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="col-md-7" id="workHistory" data-bind="visible: selectedEmployee()">
        <table class="table" style="width:100%;" id="empWorkHistoryTable">
            <thead>
                <tr>
                    <th>Company</th>
                    <th>Title</th>
                    <th>Status</th>
                    <th>Salary</th>
                    <th class="text-center">Move</th>
                    <th class="text-center">Delete</th>
                </tr>
            </thead>
            <tbody id="work-history-tbody" data-bind="foreach: activeWorkHistory">
                <tr class="work-history-row" data-bind="css: {'last-moved-row': moved, 'fade-out': fadeOut}">
                    <td><a href="#" class="work-history-link" data-bind="text: company, click: function() { $parent.selectWorkHistory($data, true) }"></a></td>
                    <td data-bind="text: title"></td>
                    <td data-bind="text: status"></td>
                    <td data-bind="text: salary"></td>
                    <td class="move-arrows">
                        <a href="#" data-bind="click: function() { $parent.moveWorkHistoryUp($data)}"><i class="fa fa-arrow-up"></i></a> |
                        <a href="#" data-bind="click: function() { $parent.moveWorkHistoryDown($data)}"><i class="fa fa-arrow-down"></i></a>
                    </td>
                    <td class="delete">
                        <a href="#" data-bind="click: function(){$parent.deleteWorkHistory($data)}"><i class="fa fa-trash-o"></i></a>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<br />
<br />
<div class="row">
    <div class="col-sm-6">
    </div>
    <div class="col-sm-6 text-right">
        <button class="btn btn-primary main-button" id="btn-submit" onclick="submitIfChanged(event)">No Changes...</button>
        <button class="btn btn-secondary main-button-right-edge" data-bind="click: function(){cancelClicked(event)}">Cancel</button>
    </div>
</div>

<style>

    .delete, delete a {
        color: #d32525;
        text-align: center;
    }

        .delete:hover, .delete a :hover {
            color: red;
        }

    .emp-info-row, .work-history-row {
        background: #fff;
    }

        .emp-info-row:hover {
            background: #ddd;
        }

        .emp-info-row.selected, .emp-info-row.selected:hover {
            background: #ff0;
        }

    .emp-info-link, work-history-link {
        text-decoration: none;
        color: #d32525;
    }

    .work-history-row.last-moved-row, .emp-info-row.last-moved-row {
        background: rgba(0, 0, 255, 0.2);
    }

        .work-history-row.last-moved-row.fade-out, .emp-info-row.last-moved-row.fade-out {
            background: rgba(255, 255, 255, 1);
            transition: background-color 2.5s ease;
        }

    .move-arrows {
        width: 75px;
        text-align: right;
    }

        .move-arrows a {
            text-decoration: none;
        }

            .move-arrows a:hover {
                text-decoration: none;
                color: rgba(0, 0, 255, 1.0);
            }
</style>

<div id="add-new-employee-dialog" class="modal" tabindex="1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add new Employee</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-sm-2 text-right">Name:</div>
                    <div class="col-sm-4">
                        <input type="text" data-bind="value: addNewEmployeeName" />
                    </div>
                    <div class="col-sm-2 text-right">Company:</div>
                    <div class="col-sm-4">
                        <input type="text" data-bind="value: addNewCompanyName" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-2 text-right">Email:</div>
                    <div class="col-sm-4">
                        <input type="text" data-bind="value: addNewEmail" />
                    </div>
                    <div class="col-sm-2 text-right">Gender:</div>
                    <div class="col-sm-4">
                        <input type="radio" name="gender" value="F" data-bind="checked: addNewGender" />&nbsp; Female &nbsp;&nbsp;
                        <input type="radio" name="gender" value="M" data-bind="checked: addNewGender" />&nbsp; Male &nbsp;&nbsp;
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-2 text-right">Title:</div>
                    <div class="col-sm-4">
                        <select data-bind="options: titles, value: addNewTitle, optionsCaption: 'Choose Title...'"></select>
                    </div>
                    <div class="col-sm-2 text-right">Salary:</div>
                    <div class="col-sm-4">
                        <input type="number" data-bind="value: addNewSalary" />
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="save-new-emp" data-bind="click: saveNewEmployee">Add</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancle</button>
            </div>

        </div>
    </div>
</div>


@section Scripts {

    @Scripts.Render("~/bundles/knockout/js")
    <script src="@Url.Content("~/Scripts/toastr.min.js")" type="text/javascript"></script>
    <script type="text/javascript">

        @{
            foreach(var item in Model.Employees)
            {
                item.ReplaceNullsWithEmptyStrings();
            }

            var json = JsonConvert.SerializeObject(Model);
        }

        @Html.Raw("var model = " + json)
        @Html.Raw("var originalModel = " + json)

        var viewModel = new ManageEmployeesViewModel({ model: model });

        $(document).ready(function () {
            viewModel.initialize();
        });

        function ManageEmployeesViewModel(args) {

            var self = this;
            self.model = { employeeInfo: ko.observableArray() };
            self.originalModel = { employeeInfo: ko.observableArray() };

            self.isInitialized = ko.observable(false);
            self.submitBtn = $('#btn-submit');

            self.selectedEmployee = ko.observable();
            self.selectedWorkHistory = ko.observable();

            //make selection
            self.selectEmployee = function (data) {
                self.selectedEmployee(data);
            };

            self.activeEmployees = ko.computed(function () {
                if (self.isInitialized()) {
                    return ko.utils.arrayFilter(self.model.employeeInfo(), function (x) {
                        return !x.isDeleted();
                    });
                } else {
                    return [];
                }
            });

            self.activeWorkHistory = ko.computed(function () {
                if (self.selectedEmployee() && self.isInitialized()) {
                    return ko.utils.arrayFilter(self.selectedEmployee().workHistory(), function (x) {
                        return !x.isDeleted();
                    }).sort(function (x, y) {
                        return x.displaySeq() < y.displaySeq() ? -1
                            : x.displaySeq() > y.displaySeq() ? 1
                                : 0;
                    });
                } else {
                    return [];
                }
            });

            //select work-History of a selected employee
            self.selectWorkHistory = function (workHistory, showEditDialog) {
                console.log(workHistory()[0].employeeId() + '/' + workHistory()[0].company() + ' was clicked');
                self.selectedWorkHistory(workHistory);
            }

            self.moveWorkHistoryUp = function (workHistory) {

                var result = self.findWorkHistory(self.selectedEmployee(), workHistory.company());
                var i = result.index;

                if (i > 0) {

                    var wrkHistToSwap = self.selectedEmployee().workHistory()[i - 1];

                    self.selectedEmployee().workHistory()[i - 1] = workHistory;
                    self.selectedEmployee().workHistory()[i] = wrkHistToSwap;

                    var temp = workHistory.displaySeq();
                    workHistory.displaySeq(wrkHistToSwap.displaySeq());
                    workHistory.isModified(true);

                    wrkHistToSwap.displaySeq(temp);
                    wrkHistToSwap.isModified(true);

                    self.selectedEmployee().isModified(true);

                    self.indicateLastMovedRow(workHistory, self.selectedEmployee().employeeName());

                    self.updateSubmitButton(self.submitBtn, ko.toJSON(self.model.employeeInfo), ko.toJSON(self.originalModel.employeeInfo));
                }
            }

            self.moveWorkHistoryDown = function (workHistory) {

                var result = self.findWorkHistory(self.selectedEmployee(), workHistory.company());
                var i = result.index;

                if (i < self.selectedEmployee().workHistory().length - 1) {

                    var wrkHistToSwap = self.selectedEmployee().workHistory()[i + 1];

                    self.selectedEmployee().workHistory()[i + 1] = workHistory;
                    self.selectedEmployee().workHistory()[i] = wrkHistToSwap;

                    var temp = workHistory.displaySeq();
                    workHistory.displaySeq(wrkHistToSwap.displaySeq());
                    workHistory.isModified(true);

                    wrkHistToSwap.displaySeq(temp);
                    wrkHistToSwap.isModified(true);

                    self.selectedEmployee().isModified(true);

                    self.updateSubmitButton(self.submitBtn, ko.toJSON(self.model.employeeInfo), ko.toJSON(self.originalModel.employeeInfo));
                }
            }

            self.findWorkHistory = function (empInfo, company) {
                if (!empInfo) return null;
                for (var i = 0; i < empInfo.workHistory().length; i++) {
                    var wrkHist = empInfo.workHistory()[i];
                    if (wrkHist.company() === company) {
                        return { EmpInfo: empInfo, Company: company, index: i }
                    }
                }

                return {};
            }

            var lastMovedRowsContext = {};
            self.indicateLastMovedRow = function (lastMoved, empStr) {
                var ctxLabel = lastMoved.company ? lastMoved.company() : empStr + '_' + lastMoved.company();
                var r = lastMovedRowsContext[ctxLabel];
                if (r && r.__fadeOutLastMoved) {
                    clearTimeout(r.__fadeOutLastMoved);
                    r.__fadeOutLastMoved = null;
                    lastMoved.moved(false);
                    lastMoved.fadeOut(false);

                    if (r.__fadeOutLastMoved2) {
                        clearTimeout(r.__fadeOutLastMoved2);
                        lastMoved.moved(false);
                        lastMoved.fadeOut(false);
                        r.__fadeOutLastMoved2 = null;
                    }
                }

                lastMoved.moved(true);

                if (!r) {
                    r = lastMovedRowsContext[ctxLabel] = {};
                }

                r.__fadeOutLastMoved = setTimeout(function () {
                    lastMoved.fadeOut(true);
                    r.__fadeOutLastMoved2 = setTimeout(function () {
                        lastMoved.moved(false);
                        lastMoved.fadeOut(false);
                        r.__fadeOutLastMoved = null;
                        r.__fadeOutLastMoved2 = null;
                    }, 3000);
                }, 2000);
            }

            self.deleteWorkHistory = function (workHistory) {
                if (confirm('Are you sure to delete work history ' + workHistory.company() + '?')) {
                    workHistory.isDeleted(true);
                    self.selectedEmployee().isModified(true);
                    self.updateDisplaySequence(self.selectedEmployee());

                    self.updateSubmitButton(self.submitBtn, ko.toJSON(self.model.employeeInfo), ko.toJSON(self.originalModel.employeeInfo));
                }
            }

            // #region Add new Employee
            self.titles = ko.observableArray([]);
            self.addNewTitle = ko.observable();
            self.addNewEmployeeName = ko.observable();
            self.addNewCompanyName = ko.observable();
            self.addNewEmail = ko.observable();
            self.addNewGender = ko.observable();
            self.addNewSalary = ko.observable();

            self.addNewEmployee = function () {
                //reset values
                self.addNewTitle(undefined);
                self.addNewEmployeeName(undefined);
                self.addNewCompanyName(undefined);
                self.addNewEmail(undefined);
                self.addNewGender(undefined);
                self.addNewSalary(undefined);
                self.titles([]);

                self.titles(["Supervisor", "Manager", "Developer", "DBA", "Tester"]);

                //display dialog to add new employee
                $('#add-new-employee-dialog').modal('show');
            }

            self.saveNewEmployee = function () {
               //validate data and make ajax call to save new employee

                var errMsgs = [];

                if (self.addNewEmployeeName() === undefined || self.addNewEmployeeName() === "") {
                    errMsgs.push("Name is required!");
                }

                if (self.addNewCompanyName() === undefined || self.addNewCompanyName() === "") {
                    errMsgs.push("Company name is required!");
                }

                if (self.addNewEmail() === undefined || self.addNewEmail() === "") {
                    errMsgs.push("Email is required!");
                }

                if (self.addNewGender() === undefined || self.addNewGender() === "") {
                    errMsgs.push("Gender is required!");
                }

                if (self.addNewSalary() === undefined || self.addNewSalary() <= 0) {
                    errMsgs.push("Salary is required and it must be a positive number!");
                }

                if (self.addNewTitle() === undefined || self.addNewTitle() === "") {
                    errMsgs.push("Title is required!");
                }

                if (errMsgs.length > 0) {
                    var msg = "";
                    for (var i = 0; i < errMsgs.length; i++) {
                        msg += errMsgs[i] + "\n";
                    }
                    toastr["error"](msg, 'Error');
                    return false;
                }

                $('#save-new-emp').prop('disabled', true);
                var dataToPost = ko.toJSON(self.model.employees);

                $.ajax({
                    url: '@Url.Action("SaveNewEmployee", "KnockoutStuff")',
                    cache: false,
                    traditional: true,
                    dataType: "json",
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify({ name: self.addNewEmployeeName(), company: self.addNewCompanyName(), email: self.addNewEmail(), gender: self.addNewGender(), salary: self.addNewSalary(), title: self.addNewTitle()}),
                    success: function (data) {
                        if (data.isSucceed) {
                            toastr["info"]("Saved successfully", 'Info');
                            window.location.reload();
                        }
                        else {
                            toastr["error"](data.message, 'Error');
                        }
                    },
                    error: function (response) {
                        toastr["error"](response, 'Error');
                        $('#save-new-emp').prop('disabled', false);
                    }
                });

            }
            // #endregion

            //Delete employee
            self.deleteEmployee = function (empId) {
                var empTodelete = ko.utils.arrayFirst(self.model.employeeInfo(), function (x) {
                    var id = x.employeeId();
                    if (id === empId) {
                        return x;
                    }
                });

                if (empTodelete) {
                    if (confirm('Are you sure to delete employee ' + empTodelete.employeeName() + '?')) {
                        empTodelete.isDeleted(true);
                        self.updateSubmitButton(self.submitBtn, ko.toJSON(self.model.employeeInfo), ko.toJSON(self.originalModel.employeeInfo));
                    }
                }
            }

            //Cancel all (redirect to jqGrid page)
            self.cancelClicked = function (event) {
                event.preventDefault();

                var changes = JSON.stringify(ko.toJS(model)) === JSON.stringify(ko.toJS(originalModel));

                if (changes) {
                    if (confirm('Your changes have not been saved. Are you sure to abandon changes?')) {
                        var link = '@Url.Action("Index", "KnockoutStuff")';
                        window.location.href = link;
                    }
                } else {
                    return false;
                }
            }

            self.updateDisplaySequence = function (employee) {
                var index = 1;
                for (var i = 0; i < employee.workHistory().length; i++) {
                    var wrkHist = employee.workHistory()[i];
                    if (!wrkHist.isDeleted()) {
                        if (wrkHist.displaySeq() !== index) {
                            wrkHist.displaySeq(index);
                            wrkHist.isModified(true);
                        }
                        index++;
                    }
                }
            }

            self.submitIfChanged = function (event) {
                event.preventDefault();

                toastr["info"]('Work in progress.', 'Info');
                return false;

                self.submitBtn.prop('disabled', true);

                var link = '@Url.Action("Index", "KnockoutJsEmployeeMgr")';
                var dataToPost = ko.toJSON(self.model.employees);

                $.ajax({
                    url: '@Url.Action("SaveEmployee", "KnockoutJsEmployeeMgr")',
                    cache: false,
                    traditional: true,
                    dataType: "json",
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: dataToPost,
                    success: function (data) {
                        if (data.success) {
                            window.location.reload();
                        }
                        else {
                            alert("error: " + data.msg);
                        }
                    },
                    error: function (response) {
                        alert("error: " + response.msg);
                        self.submitBtn.prop('disabled', false);
                    }
                });
            }

            //Enable/disable submit button
            self.updateSubmitButton = function (submitBtn, model, originalModel) {
                if (this.hasChanges(model, originalModel)) {
                    $(submitBtn).prop('disabled', false)
                        .text('Submit')
                        .removeClass('btn-outline-primary')
                        .addClass('btn-primary');
                } else {
                    $(submitBtn).prop('disabled', true)
                        .text('No Changes...')
                        .removeClass('btn-primary')
                        .addClass('btn-outline-primary');
                }
            }

            self.hasChanges = function (model, originalModel) {
                var changes = JSON.stringify(ko.toJS(model)) !== JSON.stringify(ko.toJS(originalModel));
                return changes;
            }

            self.initialize = function () {

                toastr.options = {
                    "closeButton": false,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": false,
                    "positionClass": "toast-top-center",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "5000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                };

                var empInfo = [];
                for (var i = 0; i < args.model.Employees.length; i++) {
                    var emp = args.model.Employees[i];
                    empInfo.push(new BuildEmployeeInfo(emp.Id, emp.Name, emp.Company, emp.Email, emp.Gender, emp.WorkHistory));
                }
                self.model.employeeInfo(empInfo);

                var origModel = [];
                for (var i = 0; i < args.model.Employees.length; i++) {
                    var emp = args.model.Employees[i];
                    origModel.push(new BuildEmployeeInfo(emp.Id, emp.Name, emp.Company, emp.Email, emp.Gender, emp.workHistory));
                }
                self.originalModel.employeeInfo(origModel);

                ko.applyBindings(viewModel);
                self.isInitialized(true);
            }
        }

        function BuildEmployeeInfo(id, name, company, email, gender, wrkHist) {
            var self = this;

            self.employeeId = ko.observable(id);
            self.employeeName = ko.observable(name);
            self.company = ko.observable(company);
            self.email = ko.observable(email);
            self.gender = ko.observable(gender);
            self.workHistory = ko.observableArray([]);

            if (wrkHist) {
                var wrkHistArrays = [];
                for (var j = 0; j < wrkHist.length; j++) {
                    wrkHistArrays.push(new BuildWorkHistory(wrkHist[j]));
                }

                self.workHistory(wrkHistArrays);
            }

            self.isDeleted = ko.observable(false);
            self.isNew = ko.observable(false);
            self.isModified = ko.observable(false);
        }

        function BuildWorkHistory(workHistory) {
            var self = this;
            self.workHistoryId = ko.observable(workHistory.Id);
            self.employeeId = ko.observable(workHistory.EmployeeId);
            self.company = ko.observable(workHistory.CompanyName);
            self.title = ko.observable(workHistory.Title);
            self.displaySeq = ko.observable(workHistory.DisplaySequence);
            self.salary = ko.observable(workHistory.Salary);
            self.hireDate = ko.observable(workHistory.HireDate);
            self.isDeleted = ko.observable(false);
            self.isNew = ko.observable(false);
            self.isModified = ko.observable(false);
            self.moved = ko.observable(false);
            self.fadeOut = ko.observable(false);
        }

    </script>
}
