@model Playground.Mvc.Controllers.CompellingExample1Model
@using Newtonsoft.Json


@{
    ViewBag.Title = "CompellingExample1";
}

<link href="@Url.Content("~/Content/toastr.min.css")" rel="stylesheet" type="text/css" />

<h2>CompellingExample1</h2>

<br />

<style>
    ul {
        list-style: none;
        margin-bottom: 10px;
    }

    label {
        display: block;
        padding: 5px 10px;
    }

        label:first-child {
        }

        label:nth-child(n+2) {
            margin-left: 1em;
        }

    input[type="checkbox"] {
        transform: scale(1.5);
        -webkit-transform: scale(1.5);
    }
</style>


<div class="row">
    <div class="col-md-4">
        <fieldset>
            <legend>Select Source / Target Id</legend>
            <div class="row">
                <div class="col-md-2 text-right">
                    Source:
                </div>
                <div class="col-sm-10">
                    <select data-bind="options: filteredSourceIdList, value: selectedSourceId, optionsCaption: 'Choose...'" style="width:200px;"></select>
                    <br />
                    <input id="filter" placeholder="filter src Ids..." type="text" style="width:200px;" data-bind="textInput: sourceIdfilter" />
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2 text-right">
                    Target:
                </div>
                <div class="col-sm-10">
                    <select multiple data-bind="options: targetIds, selectedOptions: selectedTargetIds, optionsCaption: 'Choose...'" style="width:200px; height:150px;"></select>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-md-2 text-right"></div>
                <div class="col-sm-10">
                    <button type="button" class="btn btn-primary" data-bind="click: GetRouteOperToCopy">Get Route/Oper to Copy</button>
                </div>
            </div>
        </fieldset>
    </div>

    <div class="col-md-8" data-bind="visible: displaySelectOperDiv()">
        <fieldset>
            <legend>Select Operations to copy</legend>
            <div class="row">
                <div class="col-md-2">
                </div>
                <div data-bind="foreach: commonRouteOpers ">
                    <ul data-bind="foreach: TargetRouteOper">
                        <li class="child">
                            <input type="checkbox" name="level-1"
                                   data-bind="checked: IsSelected, click: $root.onSelectRoute($data)" />
                            <span data-bind="text: RouteAndTargetId"></span>
                            <ul data-bind="foreach: Operations ">
                                <li class="child">
                                    <input type="checkbox" name="level-2"
                                           data-bind="checked: IsSelected, click: $root.selectOper($parent.Route(), $parent.TargetId())" />
                                    <span data-bind="text: Operation"></span>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </div>

            <br />

            <div class="row">
                <div class="col-md-2 text-right"></div>
                <div class="col-sm-10">
                    <button type="button" class="btn btn-primary" data-bind="click: CopySelectedOpers">Copy Selected Oper(s)</button>
                </div>
            </div>
        </fieldset>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/knockout/js")
    <script src="@Url.Content("~/Scripts/knockout.mapping-latest.js")" type="text/javascript"></script>

    <script src="@Url.Content("~/Scripts/toastr.min.js")" type="text/javascript"></script>

    <script type="text/javascript">
            @{
        var json = JsonConvert.SerializeObject(Model);
    }

    @Html.Raw("var model = " + json)

        var viewModel = new CompellingExampleViewModel({
            ids: model.Ids
    });

    $(document).ready(function () {
        viewModel.initialize();
    });

    function CompellingExampleViewModel(args) {

        var self = this;

        // properties
        self.sourceIds = ko.observableArray(args.ids);
        self.selectedSourceId = ko.observable();
        self.targetIds = ko.observableArray([]);
        self.selectedTargetIds = ko.observableArray([]);
        self.isInitialized = ko.observable(false);
        self.displaySelectOperDiv = ko.observable(false);
        self.commonRouteOpers = ko.observableArray([]);
        self.sourceIdfilter = ko.observable();

        self.filteredSourceIdList = ko.computed(function () {
            var name = self.sourceIdfilter();
            if (!name || name == "None") {

                return self.sourceIds();
            } else {
                return ko.utils.arrayFilter(self.sourceIds(), function (i) {
                    return i.toString().toLowerCase().indexOf(name.toLowerCase()) !== -1;
                });
            }
        });

        self.selectOper = function (route, id) {

            if (self.displaySelectOperDiv()) {
                var totalOperCount = 0;
                var selectedOperCount = 0;
                for (var i = 0; i < self.commonRouteOpers().TargetRouteOper().length; i++) {
                    var item = self.commonRouteOpers().TargetRouteOper()[i];
                    if (item.Route() === route && item.TargetId() === id) {
                        totalOperCount = item.Operations().length;
                        for (var j = 0; j < totalOperCount; j++) {
                            if (item.Operations()[j].IsSelected()) {
                                selectedOperCount++;
                            }
                        }
                        break;
                    }
                }

                if (totalOperCount === selectedOperCount) {
                    //Check parent Route Check Box to true
                    for (var i = 0; i < self.commonRouteOpers().TargetRouteOper().length; i++) {
                        var item = self.commonRouteOpers().TargetRouteOper()[i];
                        if (item.Route() === route && item.TargetId() === id) {
                            item.IsSelected(true);
                            break;
                        }
                    }
                } else {
                    //Check parent Route Check Box to false
                    for (var i = 0; i < self.commonRouteOpers().TargetRouteOper().length; i++) {
                        var item = self.commonRouteOpers().TargetRouteOper()[i];
                        if (item.Route() === route && item.TargetId() === id) {
                            item.IsSelected(false);
                            break;
                        }
                    }
                }
            }
        }

        self.onSelectRoute = function (data) {
            if (self.displaySelectOperDiv()) {
                for (var i = 0; i < self.commonRouteOpers().TargetRouteOper().length; i++) {
                    var routeItem = self.commonRouteOpers().TargetRouteOper()[i];
                    if (routeItem.Route() === data.Route() && routeItem.TargetId() === data.TargetId()) {
                        if (routeItem.IsSelected()) {
                            for (var j = 0; j < routeItem.Operations().length; j++) {
                                routeItem.Operations()[j].IsSelected(true);
                            }
                        } else {
                            for (var j = 0; j < routeItem.Operations().length; j++) {
                                routeItem.Operations()[j].IsSelected(false);
                            }
                        }
                    }
                }
            }
        }

        self.selectedSourceId.subscribe(function (newValue) {
            if (newValue) {
                self.targetIds([]); //reset target
                self.selectedTargetIds([]); //Reset selections as well

                $.ajax({
                    url: '@Url.Action("GetTargetIds", "KnockoutStuff")',
                    cache: false,
                    dataType: "json",
                    type: "POST",
                    traditional: true,
                    contentType: 'application/json',
                    data: JSON.stringify({ sourceId: newValue }),
                    success: function (data) {
                        if (data.success) {
                            self.targetIds(ko.mapping.fromJS(data.targetIds.Ids)());
                        } else {
                            toastr["error"](data.message, 'Error');
                        }
                    },
                    error: function (response) {
                        toastr["error"](response, 'Error');
                    }
                });

            }
        });

        self.GetRouteOperToCopy = function () {

            if (self.selectedSourceId() === undefined || self.selectedSourceId().length === 0) {
                toastr["error"]("You must select Source Id", 'Error');
                return false;
            }

            if (self.selectedTargetIds() === undefined || self.selectedTargetIds().length === 0) {
                toastr["error"]("You must select at least one Target Id", 'Error');
                return false;
            }

            var targetIds = self.selectedTargetIds();

            $.ajax({
                url: '@Url.Action("GetRouteOpersToCopy", "KnockoutStuff")',
                cache: false,
                dataType: "json",
                type: "POST",
                traditional: true,
                contentType: 'application/json',
                data: JSON.stringify({ sourceId: self.selectedSourceId(), targetIds: targetIds}),
                success: function (data) {
                    if (data.success) {
                        if (data.commonRouteOpers.FoundCommonOperations) {
                            var x = ko.mapping.fromJS(data.commonRouteOpers);
                            self.commonRouteOpers(ko.mapping.fromJS(data.commonRouteOpers));
                            if (self.commonRouteOpers().TargetRouteOper().length > 0) {
                                self.displaySelectOperDiv(true);
                            }
                        } else {
                            toastr["error"]("No common Route/Oper found for the selected target Ids.", 'Error');
                        }
                    } else {
                        toastr["error"](data.message, 'Error');
                    }
                },
                error: function (response) {
                    toastr["error"](response, 'Error');
                }
            });
        }

        self.CopySelectedOpers = function () {
            //validate
            var selectedOpers = [];
            for (var i = 0; i < self.commonRouteOpers().TargetRouteOper().length; i++) {
                var oper = self.commonRouteOpers().TargetRouteOper()[i];
                for (var j = 0; j < oper.Operations().length; j++) {
                    var item = oper.Operations()[j];
                    if (item.IsSelected()) {
                        selectedOpers.push(item.Operation());
                    }
                }
            }

            if (selectedOpers.length === 0) {
                toastr["error"]("Please select at least one Operation and try again!", 'Error');
                return false;
            }

            var result = ko.mapping.toJS(self.commonRouteOpers());

            $.ajax({
                url: '@Url.Action("CopySelectedOperations", "KnockoutStuff")',
                cache: false,
                dataType: "json",
                type: "POST",
                traditional: true,
                contentType: 'application/json',
                data: JSON.stringify(result),
                success: function (data) {
                    if (data.success) {
                        self.commonRouteOpers(undefined);
                        self.selectedTargetIds([]);
                        self.selectedSourceId(undefined);

                        toastr["info"]("Route copied successfully.", 'Info');

                        self.displaySelectOperDiv(false);

                    } else {
                        toastr["error"](data.message, 'Error');
                    }
                },
                error: function (response) {
                    toastr["error"](response, 'Error');
                }
            });
        }

        self.initialize = function () {

            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": false,
                "positionClass": "toast-top-center",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            };

            ko.applyBindings(self);

            self.isInitialized(true);
        }
    }
    </script>
}